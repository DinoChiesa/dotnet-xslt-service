Wednesday, 11 December 2024, 01:55

A demonstration of .NET/C# hosting the Microsoft XSLTransform class.
Prior to .NET 5, it was possible to use C# code directly in the XSL sheet.
Microsoft changed this with .NET Core and subsequent to .NET 5, removing that
capability.

When you try to use it you will get a runtime error, something like this:

Unhandled exception. System.Xml.Xsl.XslLoadException: XSLT compile error. An error occurred at calc.xsl, (4, 56). ---> System.PlatformNotSupportedException: Compiling JScript/CSharp scripts is not supported


The closest replacement is something called an "Extension object" which you must
reference in the XSL differently than script.  The Extension object must be
provided when the XslTransform is instantiated.


See https://learn.microsoft.com/en-us/dotnet/api/system.xml.xsl.xsltargumentlist.addextensionobject?view=net-8.0



to build

  dotnet add package cmdwtf.BuildTimestampGenerator --version 1.0.1
  dotnet build

to run

  dotnet run


to invoke

  # request transform
  curl -i -X POST  -H content-type:application/xml  0:9090/xml --data-binary @xmldochere

  # request reload of XSL
  curl -i -X POST  -H content-type:application/json  0:9090/reload -d {}

  # read the current XSL
  curl -i -X GET  -H content-type:application/json  0:9090/xsl


to deploy into Cloud Run:
  ./deploy.sh


# after startup, the service available at "something like" this:

  https://xslt-service-511582533367.us-west1.run.app

# retrieve the location like this:

  gcloud run services describe "${SERVICE}" \
     --region "${REGION}" --project="${PROJECT}" \
     --format 'value(status.url)'


helper scripts:

  deploy.sh - deploy/re-deploy this service to Cloud Run (and provision GCS, etc)

  sendOne.sh - send a randomly-selected contrived XML file into the XSLT service.

  sendCircle.sh - wrapper on sendOne.  It selects only from circle XMLs to send to the service.

  sendClaim.sh - wrapper on sendOne.  It selects only from claim XMLs to send to the service.

  setSheet.sh - set a different stylesheet into the service (1, 2, ...)
     Look in ./sheets for the sets of rules.  There are different XSLs to handle
     different XMLs. If you set the 2.xsl as the sheet, then send a circle XML
     to the service, it will return "<none/>".  Likewise if you set the 1.xsl as
     the sheet, then send a claim XML to the service, it will return "<none/>".


To use sendClaim.sh with the remote server:
  ./setSheet.sh  2
  ./sendClaim.sh

To use sendClaim.sh with a local server:
  TARGET=local ./setSheet.sh  2
  TARGET=local ./sendClaim.sh

To use sendCircle.sh with a local server:
  TARGET=local ./setSheet.sh  1
  TARGET=local ./sendCircle.sh


Note: When processing a claim XML, This service calls out to the rules engine. It
reads the URL from appsettings.json .


